/**********************************************************************
 *
 *   Responsiveness hook generated by Quest
 *
 *   Responsive Logic for the component goes in this hook
 *   If you want to customize the min/max values for the breakpoints, open the component on Quest Editor.
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';

const useContentcontainerResponsiveSize = () => {
  const [variant, setVariant] = React.useState<string>('Property1Default');

  React.useEffect(() => {
    const handlerProperty1Variant3 = (e) =>
      setVariant((size: string) => (e.matches ? 'Property1Variant3' : size));
    const Property1Variant3Size = window.matchMedia('(max-width: 572px)');
    setVariant((size: string) =>
      Property1Variant3Size.matches ? 'Property1Variant3' : size
    );
    Property1Variant3Size.addEventListener('change', handlerProperty1Variant3);

    const handlerProperty1Variant2 = (e) =>
      setVariant((size: string) => (e.matches ? 'Property1Variant2' : size));
    const Property1Variant2Size = window.matchMedia(
      '(min-width: 572px) and (max-width: 924px)'
    );
    setVariant((size: string) =>
      Property1Variant2Size.matches ? 'Property1Variant2' : size
    );
    Property1Variant2Size.addEventListener('change', handlerProperty1Variant2);

    const handlerProperty1Default = (e) =>
      setVariant((size: string) => (e.matches ? 'Property1Default' : size));
    const Property1DefaultSize = window.matchMedia('(min-width: 924px)');
    setVariant((size: string) =>
      Property1DefaultSize.matches ? 'Property1Default' : size
    );
    Property1DefaultSize.addEventListener('change', handlerProperty1Default);
  }, []);

  return variant;
};

export default useContentcontainerResponsiveSize;
