/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Button, Dialog } from '@mui/material';
import { styled } from '@mui/material/styles';
import ContactUsSample from 'components/ContactUsSample/ContactUsSample';
import { DialogSampleProps } from 'types';
import useDialogSample from 'components/DialogSample/useDialogSample';

const DialogSample1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: 'auto',
  width: 'fit-content',
});

const Productframe: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Product: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const LoremIpsumDolorSitAm: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 1)`,
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  height: `33px`,
  width: `338px`,
  margin: `0px`,
}));

const ButtonContained: any = styled(Button)(({ theme }: any) => ({
  margin: `16px 0px 0px 0px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Button Font - Medium'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Medium'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Medium'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Medium'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Medium'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Medium'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Medium'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Medium'].textTransform,
}));

const Contactusframe: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px`,
  boxSizing: `border-box`,
  margin: `0px 0px 0px 45px`,
});

const ContactUsSample1: any = styled(ContactUsSample)(({ theme }: any) => ({
  width: `600px`,
  margin: `0px`,
}));

function DialogSample(props: DialogSampleProps): JSX.Element {
  const { data, fns } = useDialogSample();

  return (
    <DialogSample1 className={props.className}>
      <Productframe>
        <Product>
          <LoremIpsumDolorSitAm>
            {`Lorem ipsum dolor sit amet consectetur.`}
          </LoremIpsumDolorSitAm>
          <ButtonContained
            variant="contained"
            size={'medium'}
            color={'primary'}
            disabled={false}
            onClick={fns.toggleDialog}
          >
            {'Medium'}
          </ButtonContained>
        </Product>
      </Productframe>
      <Dialog open={data.isDialogOpen} onClose={undefined}>
        <Contactusframe>
          <ContactUsSample1
            open={data.isDialogOpen}
            onClose={fns.toggleDialog}
          />
        </Contactusframe>
      </Dialog>
    </DialogSample1>
  );
}

export default DialogSample;
