/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { TextField, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { ContactUsSampleProps } from 'types';

const ContactUsSample1: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['Background']['Background'],
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `40px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
}));

const ContactUs: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['H5'].fontStyle,
  fontFamily: theme.typography['Typography']['H5'].fontFamily,
  fontWeight: theme.typography['Typography']['H5'].fontWeight,
  fontSize: theme.typography['Typography']['H5'].fontSize,
  letterSpacing: theme.typography['Typography']['H5'].letterSpacing,
  lineHeight: theme.typography['Typography']['H5'].lineHeight,
  textDecoration: theme.typography['Typography']['H5'].textDecoration,
  textTransform: theme.typography['Typography']['H5'].textTransform,
  margin: `0px`,
}));

const Frame3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const Row1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const TextFieldStandard: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const TextFieldStandard1: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const Row2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px 0px 0px 40px`,
});

const TextFieldStandard2: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const TextFieldStandard3: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const TextFieldStandard4: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
}));

const Btm: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const ButtonContained: any = styled(Button)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Button Font - Large'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Large'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Large'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Large'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Large'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Large'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Large'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Large'].textTransform,
}));

function ContactUsSample(props: ContactUsSampleProps): JSX.Element {
  return (
    props.open && (
      <ContactUsSample1 className={props.className}>
        <ContactUs>{`Contact Us`}</ContactUs>
        <Frame3>
          <Row1>
            <TextFieldStandard
              size={'medium'}
              disabled={false}
              multiline={false}
              label={'Full Name'}
            />
            <TextFieldStandard1
              size={'medium'}
              disabled={false}
              multiline={false}
              label={'Phone'}
            />
          </Row1>
          <Row2>
            <TextFieldStandard2
              size={'medium'}
              disabled={false}
              multiline={false}
              label={'Company'}
            />
            <TextFieldStandard3
              size={'medium'}
              disabled={false}
              multiline={false}
              label={'Email'}
            />
          </Row2>
        </Frame3>
        <TextFieldStandard4 size={'medium'} disabled={false} multiline={true} />
        <Btm>
          <ButtonContained
            variant="contained"
            size={'large'}
            color={'primary'}
            disabled={false}
            onClick={props.onClose}
          >
            {'SUBMIT'}
          </ButtonContained>
        </Btm>
      </ContactUsSample1>
    )
  );
}

export default ContactUsSample;
