/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Button } from '@mui/material';
import XImage from 'src/assets/images/sidebar_x.png';
import { styled } from '@mui/material/styles';
import LogoImageImage from 'src/assets/images/sidebar_logo.png';
import Link1 from 'src/components/Link1/Link1';
import useSidebar from 'src/components/Sidebar/useSidebar';

const ScreenTablet = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Background']['Paper'],
  boxShadow: `0px 1px 8px rgba(0, 0, 0, 0.12), 0px 3px 4px rgba(0, 0, 0, 0.14), 0px 3px 3px rgba(0, 0, 0, 0.2)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  height: `754px`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `16px 30px 20px 30px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
}));

const MenuItems = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px`,
});

const Close = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-end`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const X = styled('img')({
  height: `18px`,
  width: `18px`,
  margin: `0px`,
});

const LogoPosition = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  height: data.isMobile ? `60px` : `90px`,
  margin: `26px 0px 0px 0px`,
}));

const Logo = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  backgroundImage: `url(${LogoImageImage})`,
  backgroundPosition: `center`,
  backgroundSize: `contain`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: data.isMobile ? `flex-start` : `center`,
  alignItems: `center`,
  alignSelf: `stretch`,
  flex: data.isMobile ? 'unset' : `1`,
  margin: `0px`,
  overflow: `hidden`,
  height: data.isMobile ? `60px` : 'unset',
}));

const Items = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: data.isMobile ? `0px 15px` : `30px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  width: data.isMobile ? 'unset' : `300px`,
  margin: `26px 0px 0px 0px`,
  alignSelf: data.isMobile ? `stretch` : 'unset',
}));

const Link2 = styled(Link1)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Link3 = styled(Link1)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `26px 0px 0px 0px`,
}));

const Link4 = styled(Link1)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `26px 0px 0px 0px`,
}));

const Link5 = styled(Link1)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `26px 0px 0px 0px`,
}));

const Link6 = styled(Link1)(({ theme }) => ({
  alignSelf: `stretch`,
  margin: `26px 0px 0px 0px`,
}));

const ButtonContained = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `26px 0px 0px 0px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Button Font - Medium'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Medium'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Medium'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Medium'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Medium'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Medium'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Medium'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Medium'].textTransform,
}));

function Sidebar(props) {
  const { data } = useSidebar();

  return (
    <ScreenTablet className={props.className}>
      <MenuItems>
        <Close>
          <X src={XImage} loading="lazy" alt={'x'} />
        </Close>
        <LogoPosition data={data}>
          <Logo data={data}></Logo>
        </LogoPosition>
        <Items data={data}>
          <Link2 />
          <Link3 />
          <Link4 />
          <Link5 />
          <Link6 />
          <ButtonContained
            variant="contained"
            size={'medium'}
            color={'primary'}
            disabled={false}
            data={data}
          >
            {'Book a meeting'}
          </ButtonContained>
        </Items>
      </MenuItems>
    </ScreenTablet>
  );
}

export default Sidebar;
